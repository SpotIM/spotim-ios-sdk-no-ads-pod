// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.29.2 clang-1200.0.30.1)
// swift-module-flags: -target arm64-apple-ios10.3 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -Onone -module-name SpotImNoAds
import AdSupport
import Alamofire
import Foundation
import PromiseKit
import SafariServices
import Swift
import UIKit
public struct InputConfiguration {
  public init(appLanguage: Swift.String)
}
public struct EmptyParser {
}
public struct JSONParser {
}
@_hasMissingDesignatedInitializers final public class SPPublicSessionInterface {
  public static func isMe(userId: Swift.String) -> Swift.Bool
  @objc deinit
}
extension NSNotification.Name {
  public static let userDisplayNameFrozen: Foundation.Notification.Name
}
extension NSNotification.Name {
  public static let spotIMConfigLoaded: Foundation.Notification.Name
}
public enum SpotImError : Swift.Error {
  case notInitialized
  case configurationSdkDisabled
  case internalError(Swift.String)
}
public enum SpotImResult<T> {
  case success(T)
  case failure(SpotImNoAds.SpotImError)
  public var value: T? {
    get
  }
  public var error: SpotImNoAds.SpotImError? {
    get
  }
}
public enum SpotImLoginStatus {
  case guest
  case loggedIn
  public static func == (a: SpotImNoAds.SpotImLoginStatus, b: SpotImNoAds.SpotImLoginStatus) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct SpotImConversationCounters : Swift.Codable {
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public struct SpotImArticleMetadata {
  public init(url: Swift.String, title: Swift.String, subtitle: Swift.String, thumbnailUrl: Swift.String)
}
@_hasMissingDesignatedInitializers public class SpotIm {
  public static var reinit: Swift.Bool
  public static func initialize(spotId: Swift.String)
  public static func sso(withJwtSecret secret: Swift.String, completion: @escaping SpotImNoAds.AuthStratCompleteionHandler)
  public static func startSSO(completion: @escaping SpotImNoAds.AuthStratCompleteionHandler)
  public static func completeSSO(with codeB: Swift.String, completion: @escaping SpotImNoAds.AuthCompletionHandler)
  @available(*, deprecated, message: "Use SpotIm.createSpotImFlowCoordinator(loginDelegate: LoginDelegate, completion: @escaping ((SpotImResult<SpotImSDKFlowCoordinator>) -> Void)) instead")
  public static func createSpotImFlowCoordinator(navigationDelegate: SpotImNoAds.SpotImSDKNavigationDelegate, completion: @escaping ((SpotImNoAds.SpotImResult<SpotImNoAds.SpotImSDKFlowCoordinator>) -> Swift.Void))
  public static func createSpotImFlowCoordinator(loginDelegate: SpotImNoAds.SpotImLoginDelegate, completion: @escaping ((SpotImNoAds.SpotImResult<SpotImNoAds.SpotImSDKFlowCoordinator>) -> Swift.Void))
  public static func getConversationCounters(conversationIds: [Swift.String], completion: @escaping ((SpotImNoAds.SpotImResult<[Swift.String : SpotImNoAds.SpotImConversationCounters]>) -> Swift.Void))
  public static var darkModeBackgroundColor: UIKit.UIColor {
    get
    set
  }
  public static var overrideUserInterfaceStyle: SpotImNoAds.SPUserInterfaceStyle? {
    get
    set
  }
  public static func getUserLoginStatus(completion: @escaping ((SpotImNoAds.SpotImResult<SpotImNoAds.SpotImLoginStatus>) -> Swift.Void))
  public static func logout(completion: @escaping ((SpotImNoAds.SpotImResult<Swift.Void>) -> Swift.Void))
  @objc deinit
}
public typealias AuthCompletionHandler = (Swift.Bool, Swift.Error?) -> Swift.Void
public typealias AuthStratCompleteionHandler = (SpotImNoAds.SSOStartResponse?, Swift.Error?) -> Swift.Void
public protocol SSOAthenticationDelegate : AnyObject {
  func ssoFlowStarted()
  func ssoFlowDidSucceed()
  func ssoFlowDidFail(with error: Swift.Error?)
  func userLogout()
}
public struct SSOStartResponse : Swift.Codable {
  public var codeA: Swift.String?
  public var jwtToken: Swift.String?
  public var autoComplete: Swift.Bool
  public var success: Swift.Bool
  public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
public typealias JSON = [Swift.String : Any]
public enum ParserError : Swift.Error {
  case keyNotFound
  public static func == (a: SpotImNoAds.ParserError, b: SpotImNoAds.ParserError) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol SpotImSDKNavigationDelegate : AnyObject {
  func controllerForSSOFlow() -> UIKit.UIViewController
}
public protocol SpotImLayoutDelegate : AnyObject {
  func viewHeightDidChange(to newValue: CoreGraphics.CGFloat)
}
public protocol AuthenticationViewDelegate : AnyObject {
  func authenticationStarted()
}
public protocol SpotImLoginDelegate : AnyObject {
  func startLoginFlow()
}
@_hasMissingDesignatedInitializers final public class SpotImSDKFlowCoordinator {
  final public func setLayoutDelegate(delegate: SpotImNoAds.SpotImLayoutDelegate)
  final public func preConversationController(withPostId postId: Swift.String, articleMetadata: SpotImNoAds.SpotImArticleMetadata, numberOfPreLoadedMessages: Swift.Int = 2, navigationController: UIKit.UINavigationController, completion: @escaping (UIKit.UIViewController) -> Swift.Void)
  @objc deinit
}
extension SpotImSDKFlowCoordinator : SpotImNoAds.SSOAthenticationDelegate {
  final public func ssoFlowStarted()
  final public func ssoFlowDidSucceed()
  final public func ssoFlowDidFail(with error: Swift.Error?)
  final public func userLogout()
}
@_hasMissingDesignatedInitializers public class SPClientSettings {
  public static let main: SpotImNoAds.SPClientSettings
  @available(*, deprecated, message: "Use SpotIm.initialize(spotId: String) instead")
  public func setup(spotKey: Swift.String?)
  @objc public func appMovedToForeground(notification: Foundation.Notification)
  @available(*, deprecated, message: "Use SpotIm.overrideUserInterfaceStyle instead")
  public static var overrideUserInterfaceStyle: SpotImNoAds.SPUserInterfaceStyle?
  @objc deinit
}
public enum SPUserInterfaceStyle : Swift.Int {
  case light
  case dark
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum Result<T> {
  case success(T)
  case failure(Swift.Error)
  public var value: T? {
    get
  }
  public var error: Swift.Error? {
    get
  }
}
extension Result {
  @discardableResult
  public func map<U>(_ function: (T) -> U) -> SpotImNoAds.Result<U>
  @discardableResult
  public func map<U>(_ function: () -> U) -> SpotImNoAds.Result<U>
  @discardableResult
  public func next<U>(_ function: (T) -> SpotImNoAds.Result<U>) -> SpotImNoAds.Result<U>
  @discardableResult
  public func next<U>(_ function: () -> SpotImNoAds.Result<U>) -> SpotImNoAds.Result<U>
  @discardableResult
  public func onError(_ function: (Swift.Error) -> Swift.Error) -> SpotImNoAds.Result<T>
  @discardableResult
  public func require() -> T
}
extension SpotImNoAds.SpotImLoginStatus : Swift.Equatable {}
extension SpotImNoAds.SpotImLoginStatus : Swift.Hashable {}
extension SpotImNoAds.ParserError : Swift.Equatable {}
extension SpotImNoAds.ParserError : Swift.Hashable {}
extension SpotImNoAds.SPUserInterfaceStyle : Swift.Equatable {}
extension SpotImNoAds.SPUserInterfaceStyle : Swift.Hashable {}
extension SpotImNoAds.SPUserInterfaceStyle : Swift.RawRepresentable {}
